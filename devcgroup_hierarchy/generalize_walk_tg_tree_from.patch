cgroup: generalize walk_tg_tree_from()

Make walk_tg_tree_from() generic enough to be used by other cgroup subsystems.

Cc: Tejun Heo <tj@kernel.org>
Cc: Li Zefan <lizefan@huawei.com>
Cc: James Morris <jmorris@namei.org>
Cc: Pavel Emelyanov <xemul@openvz.org>
Cc: Serge Hallyn <serge.hallyn@canonical.com>
Signed-off-by: Aristeu Rozanski <aris@redhat.com>

---
 include/linux/cgroup.h |    6 ++++
 kernel/cgroup.c        |   59 +++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 65 insertions(+)

Index: github/include/linux/cgroup.h
===================================================================
--- github.orig/include/linux/cgroup.h	2012-10-16 17:12:27.378662797 -0400
+++ github/include/linux/cgroup.h	2012-10-16 17:12:37.830949739 -0400
@@ -438,6 +438,12 @@
 void cgroup_exclude_rmdir(struct cgroup_subsys_state *css);
 void cgroup_release_and_wakeup_rmdir(struct cgroup_subsys_state *css);
 
+/* Used to walk the cgroup children respecting the hierarchy */
+typedef int (*cgroup_visitor)(struct cgroup *parent, void *data);
+int walk_cgroup_tree_from(struct cgroup *from, cgroup_visitor down,
+			  cgroup_visitor up, void *data);
+int cgroup_visitor_nop(struct cgroup *cgroup, void *data);
+
 /*
  * Control Group taskset, used to pass around set of tasks to cgroup_subsys
  * methods.
Index: github/kernel/cgroup.c
===================================================================
--- github.orig/kernel/cgroup.c	2012-10-16 17:12:27.378662797 -0400
+++ github/kernel/cgroup.c	2012-10-16 17:12:37.834949853 -0400
@@ -5459,6 +5459,63 @@
 	return css ? css : ERR_PTR(-ENOENT);
 }
 
+/*
+ * walk_cgroup_tree_from - iterate cgroup tree starting at *from,
+ * calling @down when first entering a node and @up when leaving
+ * it for the final time.
+ * Holds cgroup_mutex.
+ *
+ * @from: cgroup to start from
+ * @down: function called when entering a node
+ * @up: function called when leaving a node
+ * @data: private data to be passed to both callbacks
+ *
+ * returns 0 in case of success, !=0 in case one of the callbacks returned
+ * error
+ */
+int walk_cgroup_tree_from(struct cgroup *from, cgroup_visitor down,
+			  cgroup_visitor up, void *data)
+{
+	struct cgroup *parent, *child;
+	int ret;
+
+	parent = from;
+
+	cgroup_lock();
+
+down:
+	ret = (*down)(parent, data);
+	if (ret)
+		goto out;
+	list_for_each_entry(child, &parent->children, sibling) {
+		parent = child;
+		goto down;
+
+up:
+		continue;
+	}
+	ret = (*up)(parent, data);
+	if (ret || parent == from)
+		goto out;
+
+	child = parent;
+	parent = parent->parent;
+	if (parent)
+		goto up;
+out:
+	cgroup_unlock();
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(walk_cgroup_tree_from);
+
+/* cgroup_visitor No-Op to be used with walk_cgroup_tree_from */
+int cgroup_visitor_nop(struct cgroup *cgroup, void *data)
+{
+	return 0;
+}
+EXPORT_SYMBOL_GPL(cgroup_visitor_nop);
+
 #ifdef CONFIG_CGROUP_DEBUG
 static struct cgroup_subsys_state *debug_create(struct cgroup *cont)
 {
